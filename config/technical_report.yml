---
# ETD Hyrax work type
work_type: "technical_report"

upload_data:
  - directory: ORIGINAL
    ignore_files:

uploaded_files:
  field:
    name: "uploaded_files"
    property: "%{field_name}"
    type: Array

selected_files:
  field:
    name: "selected_files"
    property: "%{field_name}"
    type: Hash

parent_work:
  field:
    name: "parent_id"
    property: "%{field_name}"
    type: String

in_works:
  field:
    name: "in_works_ids"
    property: "%{work_type}.%{field_name}"
    type: Array

hydra_endpoint:
  #server_domain: "http://localhost:3000"
  # Configuration for a "generic_work" on Hydra.. this configuration needs modification when operating with different
  # work types, such as "Book", "ETD", "Article", etc.
  new_work:
    # The url to the page to generate a new work
    url: "/concern/technical_reports/new?locale=en"
    # The form action used on the new work page for posting a new work. This is used as a selector to properly identify
    # which form on the page will be used for manipulation and submission.. as well as grabbing the CSRF token from it.
    form_action: "/concern/technical_reports?locale=en"

  new_child_work:
    form_action: "/concern/parent/%{parent_id}/technical_reports?local=en"

# Add this value to the migration data
# (DEFAULT) 'always' : always add this value to the migration data
# 'if_form_field_value_missing' : add the value if the form_field doesn't have an existing value
# 'never' : do not add this value to the migration data
# 'except_empty_value' : add the value unless it is empty or nil, in which case ignore it
# 'overwrite_existing' : add the value, overwriting any previously mapped metadata
value_add_to_migration: except_empty_value

# When operating on a node, grab the value from its property. The property would likely
# be pulling from the configuration and/or value passed to a commandline arg.
# (DEFAULT) : Don't use a node property, use the standard value from CustomNode or Qualifier behavior
value_from_node_property: ''

# Custom metadata nodes to add to the data payload posted to the server
custom_nodes:
  academic_unit:
    field:
      name: academic_affiliation
      property: "%{work_type}.%{field_name}"
      type: Array
    method: Mapping::AcademicUnit.get_uris
    value_from_node_property: item_detail
  admin_set:
    field:
      name: admin_set_id
      property: "%{work_type}.%{field_name}"
      type: String
    method: Mapping::AdminSet.lookup_admin_set
    value_from_node_property: owner_id
  agreement:
    field:
      name: agreement
      property: "%{field_name}"
      type: Integer
    method: Mapping::Agreement.unprocessed
    value: 1
  dspace_collection:
    field:
      name: dspace_collection
      property: "%{work_type}.%{field_name}"
      type: Array
    method: Mapping::Collection.lookup_collection_names
    value_from_node_property: collection_handles
  dspace_community:
    field:
      name: dspace_community
      property: "%{work_type}.%{field_name}"
      type: Array
    method: Mapping::Community.lookup_community_names
    value_from_node_property: collection_handles
  license:
    field:
      name: license
      property: "%{work_type}.%{field_name}"
      type: String
    method: Mapping::License.process_metadata
    value_from_node_property: metadata
  rights_statement:
    field:
      name: rights_statement
      property: "%{work_type}.%{field_name}"
      type: String
    method: Mapping::Rights.process_metadata
    value_from_node_property: metadata
  visibility:
    field:
      name: visibility
      property: "%{work_type}.%{field_name}"
      type: String
    method: Mapping::Visibility.unprocessed
    value: open
    value_add_to_migration: if_form_field_value_missing

# Migration metadata nodes extract data from the DSpace Item metadata.xml and do some
# lookup/cleanup/mapping before posting to the server.
migration_nodes:
  creator:
    field:
      name: creator
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='creator']"
    method: Mapping::Creator.unprocessed
    qualifiers:
      default:
        field:
          name: creator
  contributor:
    field:
      name: contributor
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: //metadata/value[@element='contributor']
    method: Mapping::Contributor.unprocessed
    qualifiers:
      default:
        field:
          name: contributor
      advisor:
        field:
          name: contributor
      author:
        field:
          name: contributor
  date:
    field:
      name: date_created
      property: "%{work_type}.%{field_name}"
      type: String
    xpath: "//metadata/value[@element='date']"
    method: Mapping::Date.unprocessed
    qualifiers:
      default:
        field:
          name: date_created
      accessioned:
        field:
          name: date_uploaded
      available:
        field:
          name: date_available
      issued:
        field:
          name: date_issued
      updated:
        field:
          name: date_modified
      copyright:
        field:
          name: date_copyright
      embargo:
        field:
          name: visibility
        method:
          # set visibility to 'embargo' and embargo_release_date to the value from the node
          # set embargo policy during and after embargo
          - Mapping::Description.set_embargo
          - visibility
          - embargo_release_date
          - embargo_reason
          - additional_information
          - visibility_during_embargo
          - visibility_after_embargo
  description:
    field:
      name: description
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='description']"
    method: Mapping::Description.unprocessed
    qualifiers:
      default:
        field:
          name: description
      abstract:
        field:
          name: abstract
      digitization:
        field:
          name: digitization_spec
      embargo:
        field:
          name: visibility
          type: String
        method:
          # set visibility to 'embargo' and embargo_release_date to the value from the node
          # set embargo policy during and after embargo
          - Mapping::Description.set_embargo
          - visibility
          - embargo_release_date
          - embargo_reason
          - additional_information
          - visibility_during_embargo
          - visibility_after_embargo
      embargopolicy:
        field:
          name: visibility_during_embargo
        method:
          Mapping::Description.ignored
      peerreview:
        field:
          name: peerreviewed
          type: String
        method: Mapping::Description.translate_peerreviewed
      peerreviewnotes:
        field:
          name: additional_information
        method:
          - Mapping::Description.prepend
          - 'description.peerreviewnotes : '
      provenance:
        field:
          name: additional_information
        method:
          - Mapping::Description.prepend
          - 'description.provenance : '
      sponsorship:
        field:
          name: funding_statement
      tableofcontents:
        field:
          name: tableofcontents
      graduationdate:
        field:
          name: additional_information
      other:
        field:
          name: additional_information
  format:
    field:
      name: file_format
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='format']"
    method: Mapping::Format.unprocessed
    qualifiers:
      default:
        field:
          name: file_format
      extent:
        field:
          name: file_extent
      mimetype:
        field:
          name: file_format
  identifier:
    field:
      name: replaces
      property: "%{work_type}.%{field_name}"
      type: String
    xpath: "//metadata/value[@element='identifier']"
    method: Mapping::Identifier.unprocessed
    qualifiers:
      default:
        field:
          name: replaces
      citation:
        field:
          name: bibliographic_citation
          type: Array
      isbn:
        field:
          name: isbn
          type: Array
      issn:
        field:
          name: issn
          type: Array
      uri:
        field:
          name: replaces
      doi:
        field:
          name: doi
      orcid:
        field:
          name: identifier
      other:
        field:
          name: identifier
  language:
    field:
      name: language
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='language']"
    method: Mapping::Language.unprocessed
    qualifiers:
      default:
        field:
          name: language
      iso:
        field:
          name: language
        method: Mapping::Language.uri
  publisher:
    field:
      name: publisher
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='publisher']"
    method: Mapping::Publisher.unprocessed
    qualifiers:
      default:
        field:
          name: publisher
  relation:
    field:
      name: related_url
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='relation']"
    method: Mapping::Relation.unprocessed
    qualifiers:
      default:
        field:
          name: related_url
      ispartofseries:
        field:
          name: in_series
      ispartof:
        field:
          name: in_series
      photosandvideos:
        field:
          name: additional_information
      reportsandpublications:
        field:
          name: additional_information
      statisticsanddata:
        field:
          name: additional_information
  rights:
    field:
      name: rights
      property: "%{work_type}.%{field_name}"
      type: String
    xpath: "//metadata/value[@element='rights']"
    method: Mapping::Rights.unprocessed
    qualifiers:
      default:
        field:
          name: rights
        method: Mapping::Rights.ignored
      uri:
        field:
          name: license
        method: Mapping::Rights.unprocessed
  subject:
    field:
      name: keyword
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='subject']"
    method: Mapping::Subject.unprocessed
    qualifiers:
      default:
        field:
          name: keyword
      lcsh:
        field:
          name: subject
      other:
        field:
          name: keyword
      cab:
        field:
          name: keyword
      lcc:
        field:
          name: keyword
  subject-broad:
    field:
      name: keyword
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='subject']"
    method: Mapping::Subject.unprocessed
    qualifiers:
      default:
        field:
          name: keyword
  title:
    field:
      name: title
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='title']"
    method: Mapping::Title.unprocessed
    qualifiers:
      default:
        field:
          name: title
      alternative:
        field:
          name: alt_title
  type:
    field:
      name: resource_type
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='type']"
    method: Mapping::Type.unprocessed
    qualifiers:
      default:
        field:
          name: resource_type
        method:
          - Mapping::Type.lookup_hyrax_type
          - resource_type
  coverage:
    field:
      name: location
      property: "%{work_type}.%{field_name}"
      type: Array
    xpath: "//metadata/value[@element='coverage']"
    method: Mapping::Coverage.unprocessed
    qualifiers:
      default:
        field:
          name: location
      spatialhydrologicclosedbasins:
        field:
          name: hydrologicUnitCode
      spatialhydrologiccoastal:
        field:
          name: hydrologicUnitCode
      spatialhydrologiclowercolumbia:
        field:
          name: hydrologicUnitCode
      spatialhydrologiclowersnake:
        field:
          name: hydrologicUnitCode
      spatialhydrologicmiddlecolumbia:
        field:
          name: hydrologicUnitCode
      spatialhydrologicmiddlesnake:
        field:
          name: hydrologicUnitCode
      spatialhydrologicnorthca:
        field:
          name: hydrologicUnitCode
      spatialhydrologicwillamette:
        field:
          name: hydrologicUnitCode
      spatialhydrologichumboldt:
        field:
          name: hydrologicUnitCode
      spatialhydrologicsacramento:
        field:
          name: hydrologicUnitCode
      spatialhydrologicnorthlahontan:
        field:
          name: hydrologicUnitCode
      spatial:
        field:
          name: location
      spatial-ecoregion:
        field:
          name: location
      spatialcities:
        field:
          name: location
      spatialcounties:
        field:
          name: location
      spatialecoregion:
        field:
          name: location
      spatialoregonplanbasins:
        field:
          name: location
      spatialstates:
        field:
          name: location
      spatialwatershedcouncils:
        field:
          name: location
      temporal:
        field:
          name: date_created
